import cv2
import numpy as np
import os
import mediapipe as mp

mp_holistic = mp.solutions.holistic
mp_drawing = mp.solutions.drawing_utils


def mediapipe_detection(image, model):
    image = cv2.cvtColor(image, cv2.COLOR_BGR2RGB)
    image.flags.writeable = False
    results = model.process(image)
    image.flags.writeable = True
    image = cv2.cvtColor(image, cv2.COLOR_RGB2BGR)
    return image, results


def draw_styled_landmarks(image, results):
    if results.pose_landmarks:
        mp_drawing.draw_landmarks(
            image, results.pose_landmarks, mp_holistic.POSE_CONNECTIONS,
            mp_drawing.DrawingSpec(color=(80, 22, 10), thickness=2, circle_radius=4),
            mp_drawing.DrawingSpec(color=(80, 44, 121), thickness=2, circle_radius=2))

        if results.left_hand_landmarks:
            mp_drawing.draw_landmarks(
                image, results.left_hand_landmarks, mp_holistic.HAND_CONNECTIONS,
                mp_drawing.DrawingSpec(color=(121, 22, 76), thickness=2, circle_radius=4),
                mp_drawing.DrawingSpec(color=(121, 44, 250), thickness=2, circle_radius=2))
        if results.right_hand_landmarks:
            mp_drawing.draw_landmarks(
                image, results.right_hand_landmarks, mp_holistic.HAND_CONNECTIONS,
                mp_drawing.DrawingSpec(color=(245, 117, 66), thickness=2, circle_radius=4),
                mp_drawing.DrawingSpec(color=(245, 66, 230), thickness=2, circle_radius=2))


def extract_keypoints(results):
    pose = np.array([[res.x, res.y, res.z, res.visibility] for res in
                     results.pose_landmarks.landmark]).flatten() if results.pose_landmarks else np.zeros(33 * 4)
    lh = np.array([[res.x, res.y, res.z] for res in
                   results.left_hand_landmarks.landmark]).flatten() if results.left_hand_landmarks else np.zeros(21 * 3)
    rh = np.array([[res.x, res.y, res.z] for res in
                   results.right_hand_landmarks.landmark]).flatten() if results.right_hand_landmarks else np.zeros(
        21 * 3)
    return np.concatenate([pose, lh, rh])


# Définir la séquence de transformations à appliquer en chaîne
TRANSFORMATION_CHAIN = [
    lambda img: cv2.flip(img, 1),  # Flip horizontal
    lambda img: cv2.rotate(img, cv2.ROTATE_90_CLOCKWISE),  # Rotation 90°
    lambda img: cv2.GaussianBlur(img, (7, 7), 0),  # Flou
    lambda img: cv2.convertScaleAbs(img, alpha=1.2, beta=10)  # Augmentation luminosité
]

DATA_PATH = os.path.join('MP_DataChainAug')
VIDEO_PATH = r'E:\Dataset1'
sequence_length = 30
actions = [d for d in os.listdir(VIDEO_PATH) if os.path.isdir(os.path.join(VIDEO_PATH, d))]

with mp_holistic.Holistic(min_detection_confidence=0.5, min_tracking_confidence=0.5) as holistic:
    for action in actions:
        action_path = os.path.join(VIDEO_PATH, action)
        video_files = [f for f in os.listdir(action_path) if f.endswith(('.mp4', '.avi', '.mov'))]

        for video_idx, video_file in enumerate(video_files):
            video_path = os.path.join(action_path, video_file)
            cap = cv2.VideoCapture(video_path)

            sequence_path = os.path.join(DATA_PATH, action, str(video_idx))
            os.makedirs(sequence_path, exist_ok=True)

            frame_num = 0
            while cap.isOpened() and frame_num < sequence_length:
                ret, frame = cap.read()
                if not ret:
                    break

                # Appliquer toutes les transformations en séquence
                transformed_frame = frame.copy()
                for transform in TRANSFORMATION_CHAIN:
                    transformed_frame = transform(transformed_frame)

                # Détection Mediapipe sur l'image finale transformée
                _, results = mediapipe_detection(transformed_frame, holistic)

                # Extraire et sauvegarder les keypoints
                keypoints = extract_keypoints(results)
                npy_path = os.path.join(sequence_path, str(frame_num))
                np.save(npy_path, keypoints)

                # Visualisation (optionnel)
                vis_frame = transformed_frame.copy()
                draw_styled_landmarks(vis_frame, results)

                cv2.putText(vis_frame, f'Frame {frame_num}', (15, 30),
                            cv2.FONT_HERSHEY_SIMPLEX, 0.7, (0, 255, 0), 2)
                cv2.putText(vis_frame, f'Transformations: {len(TRANSFORMATION_CHAIN)}', (15, 60),
                            cv2.FONT_HERSHEY_SIMPLEX, 0.7, (0, 255, 0), 2)

                cv2.imshow('Chained Transformations', vis_frame)

                frame_num += 1
                if cv2.waitKey(10) & 0xFF == ord('q'):
                    break

            cap.release()

    cv2.destroyAllWindows()
